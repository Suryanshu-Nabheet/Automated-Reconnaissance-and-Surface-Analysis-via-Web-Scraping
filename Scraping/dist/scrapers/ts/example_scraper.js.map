{"version":3,"file":"example_scraper.js","sourceRoot":"","sources":["../../../src/scrapers/ts/example_scraper.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Example TypeScript Scraper\n * \n * This module demonstrates a simple web scraper using Puppeteer.\n * It extracts basic information from a website and stores it in JSON format.\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport * as puppeteer from 'puppeteer';\nimport axios from 'axios';\nimport * as cheerio from 'cheerio';\nimport * as winston from 'winston';\nimport { z } from 'zod';\nimport * as yaml from 'yaml';\n\n// Setup command line arguments parsing\nimport yargs from 'yargs';\nimport { hideBin } from 'yargs/helpers';\n\n/**\n * Configuration interface for the scraper\n */\ninterface ScraperConfig {\n  url: string;\n  selectors: {\n    title: string;\n    content: string;\n    links: string;\n    metadata?: string;\n  };\n  options?: {\n    maxLinks?: number;\n    delay?: number;\n    timeout?: number;\n    headless?: boolean;\n  };\n}\n\n/**\n * Output paths interface\n */\ninterface OutputPaths {\n  data: string;\n  exports: string;\n  schemas: string;\n}\n\n/**\n * Interface for scraped items\n */\ninterface ScrapedItem {\n  title: string;\n  url: string;\n  description: string;\n  timestamp: string;\n  tags: string[];\n  metadata: {\n    source: string;\n    author: string;\n    published_date: string;\n  };\n}\n\n/**\n * Interface for scraper statistics\n */\ninterface ScraperStats {\n  start_time: string;\n  end_time?: string;\n  elapsed_seconds?: number;\n  pages_visited: number;\n  items_scraped: number;\n  errors: number;\n  bytes_downloaded: number;\n}\n\n/**\n * Interface for scraper results\n */\ninterface ScraperResult {\n  success: boolean;\n  items_scraped: number;\n  stats: ScraperStats;\n  error?: string;\n}\n\n/**\n * Schema validation for scraped items using Zod\n */\nconst ScrapedItemSchema = z.object({\n  title: z.string(),\n  url: z.string().url(),\n  description: z.string(),\n  timestamp: z.string().datetime(),\n  tags: z.array(z.string()),\n  metadata: z.object({\n    source: z.string(),\n    author: z.string(),\n    published_date: z.string()\n  })\n});\n\n/**\n * Setup logging\n */\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.printf(({ level, message, timestamp }) => {\n      return `${timestamp} - ${level.toUpperCase()}: ${message}`;\n    })\n  ),\n  transports: [\n    new winston.transports.Console()\n  ]\n});\n\n/**\n * Example scraper class\n */\nclass ExampleScraper {\n  private config: ScraperConfig;\n  private outputPaths: OutputPaths;\n  private stats: ScraperStats;\n  private browser: puppeteer.Browser | null = null;\n\n  /**\n   * Constructor\n   * @param config Scraper configuration\n   * @param outputPaths Output directory paths\n   */\n  constructor(config: ScraperConfig, outputPaths: OutputPaths) {\n    this.config = config;\n    this.outputPaths = outputPaths;\n    this.stats = {\n      start_time: new Date().toISOString(),\n      pages_visited: 0,\n      items_scraped: 0,\n      errors: 0,\n      bytes_downloaded: 0\n    };\n\n    // Create output directories if they don't exist\n    Object.values(outputPaths).forEach(dir => {\n      if (!fs.existsSync(dir)) {\n        fs.mkdirSync(dir, { recursive: true });\n      }\n    });\n\n    // Save the schema definition\n    const schemaPath = path.join(outputPaths.schemas, 'schema.json');\n    fs.writeFileSync(\n      schemaPath, \n      JSON.stringify({\n        $schema: \"http://json-schema.org/draft-07/schema#\",\n        type: \"object\",\n        properties: {\n          title: { type: \"string\" },\n          url: { type: \"string\", format: \"uri\" },\n          description: { type: \"string\" },\n          timestamp: { type: \"string\", format: \"date-time\" },\n          tags: {\n            type: \"array\",\n            items: { type: \"string\" }\n          },\n          metadata: {\n            type: \"object\",\n            properties: {\n              source: { type: \"string\" },\n              author: { type: \"string\" },\n              published_date: { type: \"string\" }\n            }\n          }\n        },\n        required: [\"title\", \"url\", \"timestamp\"]\n      }, null, 2)\n    );\n\n    logger.info(`Initialized example scraper with target URL: ${this.config.url || 'Not specified'}`);\n  }\n\n  /**\n   * Main scrape method using Puppeteer\n   * @returns Promise resolving to an array of scraped items\n   */\n  async scrapeWithPuppeteer(): Promise<ScrapedItem[]> {\n    const targetUrl = this.config.url || 'https://example.com';\n    const selectors = this.config.selectors;\n    const options = this.config.options || {};\n    \n    logger.info(`Starting Puppeteer scrape of ${targetUrl}`);\n    \n    try {\n      // Launch browser\n      this.browser = await puppeteer.launch({\n        headless: options.headless !== false,\n        args: ['--no-sandbox', '--disable-setuid-sandbox']\n      });\n      \n      // Open new page\n      const page = await this.browser.newPage();\n      \n      // Set default timeout\n      page.setDefaultTimeout(options.timeout || 30000);\n      \n      // Set user agent\n      await page.setUserAgent('Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36');\n      \n      // Go to URL\n      await page.goto(targetUrl, { waitUntil: 'networkidle2' });\n      \n      // Update stats\n      this.stats.pages_visited++;\n      \n      // Get page content size\n      const content = await page.content();\n      this.stats.bytes_downloaded += content.length;\n      \n      logger.info(`Successfully loaded ${targetUrl}`);\n      \n      // Extract data using page.evaluate\n      const extractedData = await page.evaluate((selectors) => {\n        const extractText = (selector: string) => {\n          const element = document.querySelector(selector);\n          return element ? element.textContent?.trim() || '' : '';\n        };\n        \n        const title = extractText(selectors.title);\n        const content = extractText(selectors.content);\n        \n        // Extract links\n        const links: Array<{ url: string, text: string }> = [];\n        const linkElements = document.querySelectorAll(selectors.links);\n        linkElements.forEach((link) => {\n          const href = link.getAttribute('href');\n          if (href && !href.startsWith('#')) {\n            links.push({\n              url: href.startsWith('http') ? href : new URL(href, window.location.origin).toString(),\n              text: link.textContent?.trim() || ''\n            });\n          }\n        });\n        \n        return { title, content, links };\n      }, selectors);\n      \n      // Create items\n      const items: ScrapedItem[] = [];\n      \n      // Add main item\n      const mainItem: ScrapedItem = {\n        title: extractedData.title || 'No Title Found',\n        url: targetUrl,\n        description: extractedData.content ? \n          (extractedData.content.length > 200 ? extractedData.content.slice(0, 200) + '...' : extractedData.content) :\n          'No Content Found',\n        timestamp: new Date().toISOString(),\n        tags: ['example', 'typescript', 'puppeteer'],\n        metadata: {\n          source: 'example_ts_scraper',\n          author: 'Automated TS Scraper',\n          published_date: new Date().toISOString().split('T')[0]\n        }\n      };\n      \n      items.push(mainItem);\n      \n      // Add link items\n      const maxLinks = options.maxLinks || 5;\n      extractedData.links.slice(0, maxLinks).forEach(link => {\n        const item: ScrapedItem = {\n          title: link.text || 'Link without text',\n          url: link.url,\n          description: `Link found on ${targetUrl}`,\n          timestamp: new Date().toISOString(),\n          tags: ['link', 'reference', 'typescript'],\n          metadata: {\n            source: 'example_ts_scraper',\n            author: 'Unknown',\n            published_date: new Date().toISOString().split('T')[0]\n          }\n        };\n        items.push(item);\n      });\n      \n      // Add random delay to simulate processing\n      const delay = options.delay || Math.random() * 1500 + 500;\n      await new Promise(resolve => setTimeout(resolve, delay));\n      \n      // Update stats\n      this.stats.items_scraped += items.length;\n      logger.info(`Extracted ${items.length} items from ${targetUrl}`);\n      \n      return items;\n    } catch (error) {\n      this.stats.errors++;\n      logger.error(`Puppeteer scraping error: ${error instanceof Error ? error.message : String(error)}`);\n      if (error instanceof Error && error.stack) {\n        logger.error(`Stack trace: ${error.stack}`);\n      }\n      return [];\n    } finally {\n      // Close browser\n      if (this.browser) {\n        await this.browser.close();\n        this.browser = null;\n      }\n    }\n  }\n\n  /**\n   * Alternative scrape method using Axios and Cheerio\n   * @returns Promise resolving to an array of scraped items\n   */\n  async scrapeWithCheerio(): Promise<ScrapedItem[]> {\n    const targetUrl = this.config.url || 'https://example.com';\n    const selectors = this.config.selectors;\n    const options = this.config.options || {};\n    \n    logger.info(`Starting Cheerio scrape of ${targetUrl}`);\n    \n    try {\n      // Fetch page content\n      const response = await axios.get(targetUrl, {\n        headers: {\n          'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',\n          'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n          'Accept-Language': 'en-US,en;q=0.5'\n        },\n        timeout: options.timeout || 30000\n      });\n      \n      // Update stats\n      this.stats.pages_visited++;\n      this.stats.bytes_downloaded += response.data.length;\n      \n      // Load HTML with Cheerio\n      const $ = cheerio.load(response.data);\n      logger.info(`Successfully downloaded and parsed ${targetUrl}`);\n      \n      // Extract data\n      const title = $(selectors.title).text().trim() || 'No Title Found';\n      const content = $(selectors.content).text().trim() || 'No Content Found';\n      \n      // Extract links\n      const links: Array<{ url: string, text: string }> = [];\n      $(selectors.links).each((_, element) => {\n        const href = $(element).attr('href');\n        if (href && !href.startsWith('#')) {\n          links.push({\n            url: href.startsWith('http') ? href : new URL(href, targetUrl).toString(),\n            text: $(element).text().trim()\n          });\n        }\n      });\n      \n      // Create items\n      const items: ScrapedItem[] = [];\n      \n      // Add main item\n      const mainItem: ScrapedItem = {\n        title,\n        url: targetUrl,\n        description: content.length > 200 ? content.slice(0, 200) + '...' : content,\n        timestamp: new Date().toISOString(),\n        tags: ['example', 'typescript', 'cheerio'],\n        metadata: {\n          source: 'example_ts_scraper',\n          author: 'Automated TS Scraper',\n          published_date: new Date().toISOString().split('T')[0]\n        }\n      };\n      \n      items.push(mainItem);\n      \n      // Add link items\n      const maxLinks = options.maxLinks || 5;\n      links.slice(0, maxLinks).forEach(link => {\n        const item: ScrapedItem = {\n          title: link.text || 'Link without text',\n          url: link.url,\n          description: `Link found on ${targetUrl}`,\n          timestamp: new Date().toISOString(),\n          tags: ['link', 'reference', 'typescript'],\n          metadata: {\n            source: 'example_ts_scraper',\n            author: 'Unknown',\n            published_date: new Date().toISOString().split('T')[0]\n          }\n        };\n        items.push(item);\n      });\n      \n      // Simulate processing time\n      const delay = options.delay || Math.random() * 1500 + 500;\n      await new Promise(resolve => setTimeout(resolve, delay));\n      \n      // Update stats\n      this.stats.items_scraped += items.length;\n      logger.info(`Extracted ${items.length} items from ${targetUrl}`);\n      \n      return items;\n    } catch (error) {\n      this.stats.errors++;\n      logger.error(`Cheerio scraping error: ${error instanceof Error ? error.message : String(error)}`);\n      if (error instanceof Error && error.stack) {\n        logger.error(`Stack trace: ${error.stack}`);\n      }\n      return [];\n    }\n  }\n\n  /**\n   * Save scraped data to files\n   * @param items Array of scraped items\n   */\n  async saveData(items: ScrapedItem[]): Promise<void> {\n    if (!items.length) {\n      logger.warn('No items to save');\n      return;\n    }\n    \n    try {\n      // Validate items against schema\n      for (const item of items) {\n        try {\n          ScrapedItemSchema.parse(item);\n        } catch (error) {\n          logger.warn(`Item validation failed: ${error instanceof Error ? error.message : String(error)}`);\n        }\n      }\n      \n      // Save as JSON\n      const dataFile = path.join(this.outputPaths.data, 'items.json');\n      fs.writeFileSync(dataFile, JSON.stringify(items, null, 2));\n      \n      // Save individual items\n      const itemsDir = path.join(this.outputPaths.data, 'items');\n      if (!fs.existsSync(itemsDir)) {\n        fs.mkdirSync(itemsDir, { recursive: true });\n      }\n      \n      items.forEach((item, index) => {\n        const itemFile = path.join(itemsDir, `item_${index + 1}.json`);\n        fs.writeFileSync(itemFile, JSON.stringify(item, null, 2));\n      });\n      \n      // Create a simple export in different format (CSV-like)\n      const exportFile = path.join(this.outputPaths.exports, 'items_export.csv');\n      const csvContent = [\n        'Title,URL,Description',\n        ...items.map(item => {\n          // Escape commas in fields\n          const title = item.title.replace(/,/g, '\\\\,');\n          const url = item.url;\n          const description = item.description.replace(/,/g, '\\\\,');\n          return `${title},${url},${description}`;\n        })\n      ].join('\\n');\n      \n      fs.writeFileSync(exportFile, csvContent);\n      \n      logger.info(`Saved ${items.length} items to ${dataFile} and exported to ${exportFile}`);\n    } catch (error) {\n      this.stats.errors++;\n      logger.error(`Error saving data: ${error instanceof Error ? error.message : String(error)}`);\n    }\n  }\n\n  /**\n   * Generate a report of the scraping process\n   * @returns Scraper statistics\n   */\n  generateReport(): ScraperStats {\n    // Calculate elapsed time\n    const startTime = new Date(this.stats.start_time);\n    const endTime = new Date();\n    const elapsed = (endTime.getTime() - startTime.getTime()) / 1000;\n    \n    // Update final stats\n    this.stats.end_time = endTime.toISOString();\n    this.stats.elapsed_seconds = elapsed;\n    \n    // Save report\n    const reportFile = path.join(this.outputPaths.data, 'report.json');\n    fs.writeFileSync(reportFile, JSON.stringify(this.stats, null, 2));\n    \n    logger.info(`Generated scraping report: ${reportFile}`);\n    return this.stats;\n  }\n}\n\n/**\n * Main function to run the scraper\n * @param config Scraper configuration\n * @param outputPaths Output directory paths\n * @returns Promise resolving to scraper results\n */\nasync function run(config: ScraperConfig, outputPaths: OutputPaths): Promise<ScraperResult> {\n  try {\n    // Initialize and run the scraper\n    const scraper = new ExampleScraper(config, outputPaths);\n    \n    // Choose scraping method - Puppeteer for more complex sites, Cheerio for simpler ones\n    // For demonstration, we'll use Puppeteer by default\n    const usePuppeteer = config.options?.headless !== undefined;\n    const items = usePuppeteer ? \n      await scraper.scrapeWithPuppeteer() : \n      await scraper.scrapeWithCheerio();\n    \n    await scraper.saveData(items);\n    const stats = scraper.generateReport();\n    \n    return {\n      success: true,\n      items_scraped: items.length,\n      stats: stats\n    };\n  } catch (error) {\n    logger.error(`Error running scraper: ${error instanceof Error ? error.message : String(error)}`);\n    if (error instanceof Error && error.stack) {\n      logger.error(`Stack trace: ${error.stack}`);\n    }\n    \n    return {\n      success: false,\n      items_scraped: 0,\n      stats: {\n        start_time: new Date().toISOString(),\n        pages_visited: 0,\n        items_scraped: 0,\n        errors: 1,\n        bytes_downloaded: 0\n      },\n      error: error instanceof Error ? error.message : String(error)\n    };\n  }\n}\n\n/**\n * Command-line entry point\n */\nasync function main() {\n  // Parse command line arguments\n  const argv = yargs(hideBin(process.argv))\n    .option('config', {\n      alias: 'c',\n      type: 'string',\n      description: 'Path to configuration file'\n    })\n    .option('output', {\n      alias: 'o',\n      type: 'string',\n      description: 'Output directory',\n      default: './output'\n    })\n    .option('url', {\n      alias: 'u',\n      type: 'string',\n      description: 'URL to scrape',\n      default: 'https://example.com'\n    })\n    .help()\n    .alias('help', 'h')\n    .parseSync();\n\n  try {\n    // Load config from file or use defaults\n    let config: ScraperConfig;\n    \n    if (argv.config && typeof argv.config === 'string' && fs.existsSync(argv.config)) {\n      const configContent = fs.readFileSync(argv.config, 'utf8');\n      const ext = path.extname(argv.config).toLowerCase();\n      \n      if (ext === '.json') {\n        config = JSON.parse(configContent);\n      } else if (ext === '.yaml' || ext === '.yml') {\n        config = yaml.parse(configContent);\n      } else {\n        throw new Error(`Unsupported config file format: ${ext}`);\n      }\n    } else {\n      // Use default configuration\n      config = {\n        url: typeof argv.url === 'string' ? argv.url : 'https://example.com',\n        selectors: {\n          title: 'h1',\n          content: 'div',\n          links: 'a'\n        },\n        options: {\n          maxLinks: 5,\n          delay: 1000,\n          timeout: 30000,\n          headless: true\n        }\n      };\n    }\n    \n    // Create output paths\n    const outputBase = typeof argv.output === 'string' ? argv.output : './output';\n    const outputPaths: OutputPaths = {\n      data: path.join(outputBase, 'data'),\n      exports: path.join(outputBase, 'exports'),\n      schemas: path.join(outputBase, 'schemas')\n    };\n    \n    // Run the scraper\n    logger.info('Starting TypeScript scraper...');\n    const result = await run(config, outputPaths);\n    \n    // Output result\n    console.log(JSON.stringify(result, null, 2));\n    \n    // Return success status\n    process.exit(result.success ? 0 : 1);\n  } catch (error) {\n    logger.error(`Error: ${error instanceof Error ? error.message : String(error)}`);\n    process.exit(1);\n  }\n}\n\n// Run the main function if executed directly\nif (require.main === module) {\n  main().catch(error => {\n    console.error(`Fatal error: ${error instanceof Error ? error.message : String(error)}`);\n    process.exit(1);\n  });\n}\n\n// Export the run function for importing in other modules\nexport { run, ScraperConfig, OutputPaths, ScraperResult };\n\n"]}